{
	"name": "df_getAQIForAllStations",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ceppollutiondataforuntilactivitysink",
						"type": "DatasetReference"
					},
					"name": "pollutiondatacsv"
				},
				{
					"dataset": {
						"referenceName": "ds_ceppollutiondataforuntilactivitysink",
						"type": "DatasetReference"
					},
					"name": "pollutiondatacsvtofilter"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_aqicsvsync",
						"type": "DatasetReference"
					},
					"name": "sinktoexcel"
				}
			],
			"transformations": [
				{
					"name": "pivotpollutanants"
				},
				{
					"name": "secectvalidstationsforaqi"
				},
				{
					"name": "innerjoinfromsourcebystationandcity"
				},
				{
					"name": "aggbystation"
				},
				{
					"name": "selectreleventcolumns"
				},
				{
					"name": "calculatesubindexandcheck"
				},
				{
					"name": "calculateaqi"
				}
			],
			"script": "source(output(\n\t\tid as string,\n\t\tcountry as string,\n\t\tstate as string,\n\t\tcity as string,\n\t\tstation as string,\n\t\tlast_update as string,\n\t\tpollutant_id as string,\n\t\tpollutant_min as string,\n\t\tpollutant_max as string,\n\t\tpollutant_avg as string,\n\t\tpollutant_unit as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\twildcardPaths:['*.csv']) ~> pollutiondatacsv\nsource(output(\n\t\tid as string,\n\t\tcountry as string,\n\t\tstate as string,\n\t\tcity as string,\n\t\tstation as string,\n\t\tlast_update as string,\n\t\tpollutant_id as string,\n\t\tpollutant_min as string,\n\t\tpollutant_max as string,\n\t\tpollutant_avg as string,\n\t\tpollutant_unit as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\twildcardPaths:['*.csv']) ~> pollutiondatacsvtofilter\npollutiondatacsvtofilter pivot(groupBy(city,\n\t\tstation),\n\tpivotBy(pollutant_id, ['PM2.5', 'PM10']),\n\tPollutant_ = avg(pollutant_avg),\n\tcolumnNaming: '$N$V',\n\tlateral: true) ~> pivotpollutanants\npivotpollutanants select(mapColumn(\n\t\tcity,\n\t\tstation\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> secectvalidstationsforaqi\nsecectvalidstationsforaqi, pollutiondatacsv join(secectvalidstationsforaqi@city == pollutiondatacsv@city\n\t&& secectvalidstationsforaqi@station == pollutiondatacsv@station,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> innerjoinfromsourcebystationandcity\nselectreleventcolumns aggregate(groupBy(city,\n\t\tstate,\n\t\tstation,\n\t\tpollutant_id),\n\tpollutant_avg = avg(pollutant_avg)) ~> aggbystation\ninnerjoinfromsourcebystationandcity select(mapColumn(\n\t\tstate,\n\t\tcity = pollutiondatacsv@city,\n\t\tstation = pollutiondatacsv@station,\n\t\tlast_update,\n\t\tpollutant_id,\n\t\tpollutant_avg\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectreleventcolumns\naggbystation derive(sub_index = iif(upper(pollutant_id) == \"PM10\", \r\n    iif(pollutant_avg > 0, \r\n        iif(pollutant_avg <= 50, pollutant_avg,\r\n            iif(and(pollutant_avg > 50,pollutant_avg <= 100), pollutant_avg, \r\n                iif(and(pollutant_avg > 100, pollutant_avg <=250), 100+(pollutant_avg-100)*100/150, \r\n                    iif(and(pollutant_avg > 250, pollutant_avg <=350), 200+(pollutant_avg-250), \r\n                        iif(and(pollutant_avg > 350, pollutant_avg <=430), 300+(pollutant_avg-350)*(100/80), \r\n                            iif(pollutant_avg > 430, 400+(pollutant_avg-430)*(100/80), toDouble(0))))))), toDouble(0)), \r\niif(upper(pollutant_id) == \"PM2.5\", \r\n    iif(pollutant_avg > 0, \r\n        iif(pollutant_avg <= 30, pollutant_avg * 50 / 30, \r\n            iif(and(pollutant_avg > 30, pollutant_avg <=60), 50+(pollutant_avg-30)*50/30, \r\n                iif(and(pollutant_avg > 60, pollutant_avg <=90), 100+(pollutant_avg-60)*100/30, \r\n                    iif(and(pollutant_avg > 90, pollutant_avg <=120), 200+(pollutant_avg-90)*(100/30), \r\n                        iif(and(pollutant_avg > 120, pollutant_avg > 250), 300+(pollutant_avg-120)*(100/130), \r\n                            iif(pollutant_avg > 250, 400+(pollutant_avg-250)*100/130, toDouble(0))))))), toDouble(0)), \r\niif(upper(pollutant_id) == \"SO2\", \r\n    iif(pollutant_avg > 0, \r\n        iif(pollutant_avg <= 40, pollutant_avg * 50 / 40, \r\n            iif(and(pollutant_avg > 40, pollutant_avg <=80), 50+(pollutant_avg-40)*50/40, \r\n                iif(and(pollutant_avg > 80, pollutant_avg <=380), 100+(pollutant_avg-80)*100/300, \r\n                    iif(and(pollutant_avg > 380, pollutant_avg <=800), 200+(pollutant_avg-380)*(100/420), \r\n                        iif(and(pollutant_avg > 800, pollutant_avg > 1600), 300+(pollutant_avg-800)*(100/800), \r\n                            iif(pollutant_avg > 1600, 400+(pollutant_avg-1600)*100/800, toDouble(0))))))), toDouble(0)), \r\niif(upper(pollutant_id) == \"NO2\", \r\n    iif(pollutant_avg > 0, \r\n        iif(pollutant_avg <= 40, pollutant_avg * 50 / 40, \r\n            iif(and(pollutant_avg > 40, pollutant_avg <=80), 50+(pollutant_avg-40)*50/40, \r\n                iif(and(pollutant_avg > 80, pollutant_avg <=180), 100+(pollutant_avg-80)*100/100, \r\n                    iif(and(pollutant_avg > 180, pollutant_avg <=280), 200+(pollutant_avg-180)*(100/100), \r\n                        iif(and(pollutant_avg > 280, pollutant_avg > 400), 300+(pollutant_avg-280)*(100/120), \r\n                            iif(pollutant_avg > 400, 400+(pollutant_avg-400)*100/120, toDouble(0))))))), toDouble(0)), \r\niif(upper(pollutant_id) == \"CO\", \r\n    iif(pollutant_avg > 0, \r\n        iif(pollutant_avg <= 1, pollutant_avg * 50 / 1, \r\n            iif(and(pollutant_avg > 1, pollutant_avg <=2), 50+(pollutant_avg-1)*50/1, \r\n                iif(and(pollutant_avg > 2, pollutant_avg <=10), 100+(pollutant_avg-2)*100/8, \r\n                    iif(and(pollutant_avg > 10, pollutant_avg <=17), 200+(pollutant_avg-10)*(100/7), \r\n                        iif(and(pollutant_avg > 17, pollutant_avg > 34), 300+(pollutant_avg-17)*(100/17), \r\n                            iif(pollutant_avg > 34, 400+(pollutant_avg-34)*100/17, toDouble(0))))))), toDouble(0)), \r\niif(upper(pollutant_id) == \"OZONE\", \r\n    iif(pollutant_avg > 0, \r\n        iif(pollutant_avg <= 50, pollutant_avg * 50 / 50, \r\n            iif(and(pollutant_avg > 50, pollutant_avg <=100), 50+(pollutant_avg-50)*50/50, \r\n                iif(and(pollutant_avg > 100, pollutant_avg <=168), 100+(pollutant_avg-100)*100/68, \r\n                    iif(and(pollutant_avg > 168, pollutant_avg <=208), 200+(pollutant_avg-168)*(100/40), \r\n                        iif(and(pollutant_avg > 208, pollutant_avg > 748), 300+(pollutant_avg-208)*(100/539), \r\n                            iif(pollutant_avg > 748, 400+(pollutant_avg-400)*100/539, toDouble(0))))))), toDouble(0)), \r\niif(upper(pollutant_id) == \"NH3\", \r\n    iif(pollutant_avg > 0, \r\n        iif(pollutant_avg <= 200, pollutant_avg * 50 / 200, \r\n            iif(and(pollutant_avg > 200, pollutant_avg <=400), 50+(pollutant_avg-200)*50/200, \r\n                iif(and(pollutant_avg > 400, pollutant_avg <=800), 100+(pollutant_avg-400)*100/400, \r\n                    iif(and(pollutant_avg > 800, pollutant_avg <=1200), 200+(pollutant_avg-800)*(100/400), \r\n                        iif(and(pollutant_avg > 1200, pollutant_avg > 1800), 300+(pollutant_avg-1200)*(100/600), \r\n                            iif(pollutant_avg > 1800, 400+(pollutant_avg-1800)*100/600, toDouble(0))))))), toDouble(0)), \r\ntoDouble(0)))))))),\n\t\tcheck = iif(and(pollutant_avg <= 0, isNull(pollutant_avg)), 0, 1)) ~> calculatesubindexandcheck\ncalculatesubindexandcheck aggregate(groupBy(city,\n\t\tstation),\n\taqi = round(iif(sum(check) >= 3, max(sub_index), toDouble(0)), 2)) ~> calculateaqi\ncalculateaqi sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat(\"AQI_\", toString(currentDate(), \"yyyy-MM-dd\"), \".csv\"))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinktoexcel"
		}
	}
}